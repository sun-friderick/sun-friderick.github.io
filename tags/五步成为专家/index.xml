<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>五步成为专家 on Frederick&#39;s blog </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://sun-friderick.github.io/tags/%E4%BA%94%E6%AD%A5%E6%88%90%E4%B8%BA%E4%B8%93%E5%AE%B6/</link>
    <language>en-us</language>
    <author>Frederick Sun</author>
    <copyright>Copyright (c) 2015, Frederick Sun; all rights reserved.</copyright>
    <updated>Sun, 29 Nov 2015 10:30:03 CST</updated>
    
    <item>
      <title>五步让你成为专家级程序员</title>
      <link>http://sun-friderick.github.io/post/2015-11-29-9</link>
      <pubDate>Sun, 29 Nov 2015 10:30:03 CST</pubDate>
      <author>Frederick Sun</author>
      <guid>http://sun-friderick.github.io/post/2015-11-29-9</guid>
      <description>&lt;p&gt;Mark Lassoff是一位高级技术培训师，从事培训工作已有10余年。他培训的客户包括美国国防部、Lockheed Martin等。在多年的培训生涯中，他总结了一些如何快速学习一门语言的技巧，这些技巧非常简单，但是却让人受益匪浅。&lt;/p&gt;

&lt;p&gt;我已经从事10年的技术培训工作，一直教人如何编程。这些人包括学生、已经走上工作岗位的开发人员。在多年的工作生涯中，我注意到一些正确/错误学习编程语言的方式，下面我分享一些正确学习语言的5种技巧，虽然它们看起来都很浅显，但只要你认真执行，绝对会有很大效果和提升。&lt;/p&gt;

&lt;p&gt;##1.了解语言背后的“哲学”&lt;/p&gt;

&lt;p&gt;我在初次学习Java时，觉得它即冗长又存在不必要的复杂。那时，我还不是个经验的程序员，并且习惯使用C来编码。Java是一门伟大的语言，但我并不能体会其中的精华——甚至是它的用途，因为我无法理解Java的面向对象原理。&lt;/p&gt;

&lt;p&gt;后来，我在德克萨斯大学奥斯汀分校的Browne博士课堂上理解了面向对象方法，并采用它进行计算机科学编程。这对我更好地理解Java的核心思想以及编程方法起了非常大作用。&lt;/p&gt;

&lt;p&gt;如今已有成千上万个编程语言，不同的编程语言解决和优化不同类型的编程问题，并且在计算机系统中处于不同的级别。而你需要做的是了解你所学语言是什么、目标。理解是至关重要的，然后运用它来解决实际问题。&lt;/p&gt;

&lt;p&gt;##2.亲自输入所有的代码实例&lt;/p&gt;

&lt;p&gt;话说，实践是检验真理的唯一标准。学习一门语言，除了知道其中的原理外，最快的学习方法莫过于实践，编写代码，远远大于读书或看视频所产生的效果。输入代码并且让它们运行起来是学习一门语言至关重要的一步。即使你对该们语言是完全陌生的，在编写的时候你也会发现它们的语法结构，渐渐明白其中的含义。&lt;/p&gt;

&lt;p&gt;在编写的过程中，你肯定会犯错，发现错误并纠正它，这个过程也是不可忽视的，错误越多，你就会花更多的心思研究，这样理解就会越加深刻。&lt;/p&gt;

&lt;p&gt;##3.更进一步&lt;/p&gt;

&lt;p&gt;无论是做实验还是练习，都尝试着更进一步地了解与学习。经常这样做将会给你带来无穷的收获，驱使你不断查阅所学语言相关资料。这样做有两大优势：第一，学习该语言的文档结构并熟悉它；第二，加深概念，帮你解决一些细小问题。&lt;/p&gt;

&lt;p&gt;例如，你正在听一堂学习如何使用HTML5和JavaScript制作音频的课，那么你应该进一步问问自己：“该如何控制音量呢？”解决这个问题后，你就可以更加深入的掌握代码。&lt;/p&gt;

&lt;p&gt;##4.通过许多小例子学习——而不是大项目&lt;/p&gt;

&lt;p&gt;在多年的培训中，我一直把重点放在客户端的网络语言上，比如Java以及后来的移动开发。在课堂上，每节课都会有相应的课件，每个课件都会演示些例子，最后把这些例子组合成一个项目。在早期常会犯这样的错误，没有进行相互隔离。&lt;/p&gt;

&lt;p&gt;其实，采用隔离的方式学习各种语言技能是很重要的。比起学习个人技能，集成是个更复杂的过程。在你对一门语言有了坚实的基础后，集成确实是最好的学习方式，否则很有可能会混淆概念。&lt;/p&gt;

&lt;p&gt;##5.让程序运行&lt;/p&gt;

&lt;p&gt;一定要让程序跑起来。即使出现多个bug，也要认真调试，直到能够正确运行。想要打开一扇门，则必须要关闭一扇门。当你学习一门新的语言技能时，肯定希望以后能有较高的技能水平。有时，你很容易放弃或者跳过某个小缺陷，使该问题一直处于悬而未决的状态——这样做很危险。&lt;/p&gt;

&lt;p&gt;除此之外，没有比这个更兴奋的事情了——第一次看到自己编写的应用程序跑起来。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
