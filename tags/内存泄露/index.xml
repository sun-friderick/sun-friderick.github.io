<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>内存泄露 on Frederick&#39;s blog </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://sun-friderick.github.io/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/</link>
    <language>en-us</language>
    <author>Frederick Sun</author>
    <copyright>Copyright (c) 2015, Frederick Sun; all rights reserved.</copyright>
    <updated>Sun, 29 Nov 2015 00:30:03 CST</updated>
    
    <item>
      <title>内存泄露</title>
      <link>http://sun-friderick.github.io/post/2015-11-29</link>
      <pubDate>Sun, 29 Nov 2015 00:30:03 CST</pubDate>
      <author>Frederick Sun</author>
      <guid>http://sun-friderick.github.io/post/2015-11-29</guid>
      <description>&lt;p&gt;PCIe应用程序调试时，发现程序出现内存泄露，经过自己的摸索，以及向软件同学请教，最终解决了此问题。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;现象描述&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;应用程序开发环境为VC++,运用其debug功能进行单步调试时，程序总是报出内存泄露的错误，报告内容如下所示：&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;Detected memory leaks!
Dumping objects -&amp;gt;
strcore.cpp(118) : {143} normal block at 0x009A3E60, 53 bytes long.
 Data: &amp;lt;    (   (   F:\p&amp;gt; 01 00 00 00 28 00 00 00 28 00 00 00 46 3A 5C 70
Object dump complete.
The thread 0x9BC has exited with code 0 (0x0).
The program &#39;F:\program\SP5301\SP5301GUI\Debug\SP5301GUI.exe&#39; has exited with code 0 (0x0).
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;经过网上查阅相关资料，得知报告中相关参数含义如下：&lt;/p&gt;

&lt;p&gt;118：内存泄露的位置在strcore.cpp中第118行&lt;/p&gt;

&lt;p&gt;143：内存分配编号。 内存可能是在多次分配之后才出现泄露。
    normal block：块类型为普通型。
    0x009A3E60：内存位置。
    53 bytes long：块大小为53字节。
    第四行显示前 16 字节的内容为“&amp;lt; ( (F:\p&amp;gt; 01 00 00 00 28 00 00 00 28 00 00 00 46 3A 5C 70”。&lt;/p&gt;

&lt;p&gt;第五行显示内存泄露的线程，以及返回值。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;调试过程&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;虽然报告中显示内存泄露的位置在strcore.cpp中第118行。但是，此文件不在我的工程文件中。那么它应该是在程序运行时被调用过。而且它可能被多次调用。到底是哪次调用时出现的内存泄露，我们不得而知。为了解决内存泄露问题，准确定位内存泄露的位置是关键。&lt;/p&gt;

&lt;p&gt;首先进入单步调试，然后打开VC++菜单中view-&amp;gt;debug windows-&amp;gt;Memory。通过报告中给出的内存地址0x009A3E60，查看该地址存储的内容为&amp;rdquo;F:\program\SP5301\s6_tfg484_pcie\testdata.txt&amp;rdquo;。结合程序内容，我猜测此字符串应该为我定义的字符串指针filepath。打开watch窗口，查看filepath的值，发现果然与上面看到的一致。于是定位了内存泄露的位置为filepath变量。&lt;/p&gt;

&lt;p&gt;此字符串指针最初是在一个类里面定义的。最后赋给它的值是一个文件的路径。怀疑是该指针最后没有成功释放才导致的内存泄露。于是，我将filepath从类里面移出来，放在函数里面作为局部变量来定义。最终解决了内存泄露问题。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;归纳总结&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;发生内存错误是件非常麻烦的事情。编译器不能自动发现这些错误，通常是在程序运行时才能捕捉到。而这些错误大多没有明显的症状，时隐时现，增加了改错的难度。&lt;/p&gt;

&lt;p&gt;常见的内存错误及其对策如下：&lt;/p&gt;

&lt;p&gt;(1)      内存分配未成功，却使用了它。&lt;/p&gt;

&lt;p&gt;编程新手常犯这种错误，因为他们没有意识到内存分配会不成功。常用解决办法是，在使用内存之前检查指针是否为NULL。如果指针p是函数的参数，那么在函数的入口处用assert(p!=NULL)进行检查。如果是用malloc或new来申请内存，应该用if(p==NULL) 或if(p!=NULL)进行防错处理。&lt;/p&gt;

&lt;p&gt;(2)      内存分配虽然成功，但是尚未初始化就引用它。&lt;/p&gt;

&lt;p&gt;犯这种错误主要有两个起因：一是没有初始化的观念；二是误以为内存的缺省初值全为零，导致引用初值错误（例如数组）。 内存的缺省初值究竟是什么并没有统一的标准，尽管有些时候为零值，我们宁可信其无不可信其有。所以无论用何种方式创建数组，都别忘了赋初值，即便是赋零值也不可省略，不要嫌麻烦。&lt;/p&gt;

&lt;p&gt;(3)      内存分配成功并且已经初始化，但操作越过了内存的边界。&lt;/p&gt;

&lt;p&gt;例如在使用数组时经常发生下标“多1”或者“少1”的操作。特别是在for循环语句中，循环次数很容易搞错，导致数组操作越界。&lt;/p&gt;

&lt;p&gt;(4)      忘记了释放内存，造成内存泄露。&lt;/p&gt;

&lt;p&gt;含有这种错误的函数每被调用一次就丢失一块内存。刚开始时系统的内存充足，你看不到错误。终有一次程序突然死掉，系统出现提示：内存耗尽。&lt;/p&gt;

&lt;p&gt;动态内存的申请与释放必须配对，程序中malloc与free的使用次数一定要相同，否则肯定有错误（new/delete同理）。&lt;/p&gt;

&lt;p&gt;(5)      释放了内存却继续使用它。&lt;/p&gt;

&lt;p&gt;有三种情况：&lt;/p&gt;

&lt;p&gt;A.        程序中的对象调用关系过于复杂，实在难以搞清楚某个对象究竟是否已经释放了内存，此时应该重新设计数据结构，从根本上解决对象管理的混乱局面。&lt;/p&gt;

&lt;p&gt;B.        函数的return语句写错了，注意不要返回指向“栈内存”的“指针”或者“引用”，因为该内存在函数体结束时被自动销毁。&lt;/p&gt;

&lt;p&gt;C.        使用free或delete释放了内存后，没有将指针设置为NULL。导致产生“野指针”。&lt;/p&gt;

&lt;p&gt;在产品的开发中，通过对当前系统消耗内存总量的统计，可以对产品所需内存总量进行精确的评估，从而选择合适的内存芯片与大小，降低产品的成本。在遇到内存泄露类问题时，经常会对此束手无策，本文通过对proc下进程相关的文件进行分析，精确评估系统消耗内存的大小，还可以对内存泄露类问题的解决提供一种定位手段。
       Linux在内存使用上的原则是：如果内存充足，不用白不用，尽量使用内存来缓存一些文件，从而加快进程的运行速度，而当内存不足时，会通过相应的内存回收策略收回cache内存，供进程使用。&lt;/p&gt;

&lt;p&gt;一、系统总内存的分析。
可以从proc目录下的meminfo文件了解到当前系统内存的使用情况汇总，其中可用的物理内存=memfree+buffers+cached，当memfree不够时，内核会通过回写机制(pdflush线程)把cached和buffered内存回写到后备存储器，从而释放相关内存供进程使用，或者通过手动方式显式释放cache内存
       echo 3 &amp;gt; /proc/sys/vm/drop_caches&lt;/p&gt;

&lt;p&gt;下图是海思平台下当前系统内存的总体使用情况，其中可以看到，系统消耗掉了29M的内存，下面继续分析这些内存都是被谁消耗掉了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat /proc/meminfo
MemTotal:        68956 kB
MemFree:         18632 kB
Buffers:          4096 kB
Cached:          17260 kB
SwapCached:          0 kB
Active:          21304 kB
Inactive:        19248 kB
SwapTotal:           0 kB
SwapFree:            0 kB
Dirty:               0 kB
Writeback:           0 kB
AnonPages:       19216 kB
Mapped:           2472 kB
Slab:             6900 kB
SReclaimable:      924 kB
SUnreclaim:       5976 kB
PageTables:        460 kB
NFS_Unstable:        0 kB
Bounce:              0 kB
CommitLimit:     62060 kB
Committed_AS:    28864 kB
VmallocTotal:   442368 kB
VmallocUsed:     46984 kB
VmallocChunk:   393212 kB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;二、进程使用内存的统计
在32位操作系统中，每个进程拥有4G的虚拟内存空间，其中0~3GB是每个进程的私有用户空间，这个空间对系统中其他进程是不可见的。3~4GB是linux内核空间，由系统所有的进程以及内核所共享的。通过访问/proc/{pid}/下相关文件，可以了解每个线程虚拟内存空间的使用情况，从而了解每个线程所消耗内存的多少。
由于我们的产品都是使用多线程方式实现的，多个线程共享一个进程的用户态虚拟地址空间，虚拟地址空间包含若干区域，主要有如下几个区域：
1、当前执行文件的代码段，该代码段称为text段。
2、执行文件的数据段，主要存储执行文件用到的全局变量，静态变量。
3、存储全局变量和动态产生的数据的堆。
4、用于保存局部变量和实现函数调用的栈。
5、采用mmap方式映射到虚拟地址空间中的内存段&lt;/p&gt;

&lt;p&gt;所以只需要查看任意一个线程的用户态虚拟地址空间分配即可知道属于同一进程的所有线程占用总内存的大小。可以通过查看/proc/{pid}/maps文件来获取相关的虚拟地址空间内容，下文摘列部分典型的内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat /proc/568/maps
00008000-0036a000 r-xp 00000000 00:0e 236        /home/hik/hicore
00372000-003a5000 rw-p 00362000 00:0e 236        /home/hik/hicore
003a5000-00e28000 rwxp 003a5000 00:00 0          [heap]
40000000-40005000 r-xp 00000000 01:00 94         /lib/ld-uClibc.so.0
416db000-41770000 rw-s c2005000 00:0f 68         /dev/mem

b51fc000-b5200000 rwxp b51fc000 00:00 0
…….
be1fc000-be200000 rwxp be1fc000 00:00 0
be93b000-be950000 rwxp befeb000 00:00 0          [stack]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一行：从r-xp可知其权限为只读、可执行，该段内存地址对应于执行文件的
代码段，程序的代码段需加载到内存中才可以执行。由于其只读，不会
被修改，所以在整个系统内共享。
第二行：从rw-p可知其权限为可读写，不可执行，该段内存地址对应于执行文件的数据段，存放执行文件所用到的全局变量、静态变量。
第三行：从rwxp可知其权限是可读写，可执行，地址空间向上增长，而且不对应文件，是堆段，进程使用malloc申请的内存放在堆段。每个进程只有一个堆段，不论是主进程，还是不同的线程申请的内存，都反映到到进程的堆段。堆段向上增长，最大可以增长到1GB的位置，即0x40000000，如果大于1GB，glibc将采用mmap的方式，为堆申请一块内存。
第四行：是程序连接的共享库的内存地址。
第五行：是以mmap方式映射的虚拟地址空间。
第六、七行：是线程的栈区地址段，每个线程的栈大小都是16K。
第八行：是进程的栈区。关于栈段，每个线程都有一个，如果进程中有多个线程，则包含多个栈段。&lt;/p&gt;

&lt;p&gt;三、当前系统总内存的统计
    1、进程占用的总内存可以通过上述maps表计算出来。
    2、当系统运行起来以后，会把应用层相关的文件挂载到tmpfs文件系统下，海思系统下这部分大概有13M左右，这部分内存是以cache方式统计出来的，但是这部分内存cache无法通过回收策略或者显式的调用释放掉。
    3、根文件系统ramdisk占用的内存。
    4、当前系统保留内存的大小，可以通过查看/proc/sys/vm/min_free_kbytes来获取或者修改此内存的大小。
    5、当然，当系统运行起来后，还应该留有一定的内存用于在硬盘读写时做cache或者网络负荷比较高时分配skb等，一般需要30M以上。&lt;/p&gt;

&lt;p&gt;四、对调试内存泄露类问题的一些启示
   当进程申请内存时，实际上是glibc中内置的内存管理器接收了该请求，随着进程申请内存的增加，内存管理器会通过系统调用陷入内核，从而为进程分配更多的内存。
针对堆段的管理，内核提供了两个系统调用brk和mmap，brk用于更改堆顶地址，而mmap则为进程分配一块虚拟地址空间。
当进程向glibc申请内存时，如果申请内存的数量大于一个阀值的时候，glibc会采用mmap为进程分配一块虚拟地址空间，而不是采用brk来扩展堆顶的指针。缺省情况下，此阀值是128K，可以通过函数来修改此值。
             #include
             Int mallopt(int param, int value)
Param的取值分别为M_MMAP_THRESHOLD、M_MMAP_MAX。
Value的取值是以字节为单位的。
M_MMAP_THRESHOLD是glibc中申请大块内存阀值，大于该阀值的内存申请，内存管理器将使用mmap系统调用申请内存，如果小于该阀值的内存申请，内存管理器使用brk系统调用扩展堆顶指针。
M_MMAP_MAX是该进程中最多使用mmap分配地址段的数量。&lt;/p&gt;

&lt;p&gt;如果在实际的调试过程中，怀疑某处发生了内存泄露，可以查看该进程的maps表，看进程的堆段或者mmap段的虚拟地址空间是否持续增加，如果是，说明很可能发生了内存泄露，如果mmap段虚拟地址空间持续增加，还可以看到各个段的虚拟地址空间的大小，从而可以确定是申请了多大的内存，对调试内存泄露类问题可以起到很好的定位作用。&lt;/p&gt;

&lt;p&gt;如何检测内存泄漏&lt;/p&gt;

&lt;p&gt;内存泄漏的问题，在百度是遇到最多的，阿里相对少点。与内存泄漏斗争了很久，我总结下常用的一些有效测试方法吧。
　　1、valgrind，这是非常好用的工具，虽然参数很多，输出结果较多，但是只要认真看下，就很容易发现问题，报告是很详细的，不要被吓倒。valgrind检测的内存泄漏是非常准的，可以精确定位到代码行甚至是变量。valgrind基于valginrd core框架，这是个非常有强大的框架，他的作用不仅仅在于检测内存泄漏的，强烈建议测试新手通读下全部的文档。valgind自己也会有误报和漏报，所有具体场景需要具体分析。报告中一旦出现definitely lost的标记，就表示一定会有内存泄漏，泄漏的字节数也会报告出来，可以根据泄漏的内存大小和请求次数计算出到底是那个变量没有释放。
　　2、利用pmap+gdb，pmap可以列出特定进程的所有内存分配的地址和大小，通过gdb就可以直接看这些地址属于什么变量，通过统计这些内存地址的大小，就可以很容易的发现问题。利用自动化的gdb调试工具也可以很方便的定位。
　　3、其他的还包括memprof、商业工具Purify IBM出品，官方宣传说的不错，但是这种不开放的技术，在业界得不到认可，国内大公司一般那都不用，只有人傻钱多的公司在用。
　　4、利用一些trace工具，比如ptrace，strace之类的工具，这些trace工具会追踪特定的api，只需要统计malloc和free的调用次数就可以简单的发现是否有泄漏，但是无法定位代码行。另外还有一个更高深的工具，SystemTap，这个在国内应用还不多，但是非常厉害，可以方便hook程序的关键逻辑并插入探针。从而可以方便的检测内存泄漏。Systemtap目前还不通用，而且安装复杂，暂时不推荐使用，可以关注下，过几年可能会大规模应用。
　　valgrind是首选，因为他的设计就是为了解决所有的c++的内存问题。一些valgrind不能简单发现的，我一般会review代码，然后通过gdb自动调试技术来发现问题。通过valgrind+gdb，可以解决所有的内存泄漏。
　　另外，内存的泄漏也并不完全是没有及时的free，还有可能是其他的原因，比如设计问题等。需要靠一定的开发经验判断。
　　要尽量把静态测试和动态测试尽早的加入到持续集成中，以尽早的发现问题，不然一旦代码复杂，追查的成本就会增大。&lt;/p&gt;

&lt;p&gt;目的：
本文是《一种定位内存泄露的方法（Solaris）》对应的Linux版本，调试器使用gdb。主要介绍实例部分。其他请见《一种定位内存泄露的方法（Solaris）》。&lt;/p&gt;

&lt;p&gt;实例：
模拟new失败的程序：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdexcept&amp;gt;
class ABC
{
public:
        virtual ~ABC(){}
        int i;
        int j;
};

void f()
{
        for (int i = 0; i &amp;lt; 1000; ++i)
        {
                ABC* p = new ABC;
        }
        throw std::bad_alloc();
}

int main()
{
        f();
        return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1） 编译运行此段代码。产生一个core文件
2） 用gdb打开这个core文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gdb a.out core
(gdb) run
Starting program: /test/new_fail/a.out
terminate called after throwing an instance of &#39;std::bad_alloc&#39;
  what():  std::bad_alloc

Program received signal SIGABRT, Aborted.
0x00007ffff733f645 in raise () from /lib64/libc.so.6
(gdb) info proc
process 10683
cmdline = &#39;/test/new_fail/a.out&#39;
cwd = &#39;/test/new_fail&#39;
exe = &#39;/test/new_fail/a.out&#39;
(gdb) shell pmap 10683
10683: a.out
START               SIZE     RSS     PSS   DIRTY    SWAP PERM MAPPING
0000000000400000      4K      4K      4K      0K      0K r-xp /test/new_fail/a.out
0000000000600000      4K      4K      4K      4K      0K r--p /test/new_fail/a.out
0000000000601000      4K      4K      4K      4K      0K rw-p /test/new_fail/a.out
0000000000602000    132K     32K     32K     32K      0K rw-p [heap]
…（略）
Total:            11468K   1048K    684K    180K      0K
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;360K writable-private, 11108K readonly-private, 0K shared, and 1048K referenced&lt;/p&gt;

&lt;p&gt;可以看到heap空间的起始地址是0x0000000000602000，共132K字节，即132*1024=135168字节。
3） 因为是64位应用程序，所以指针占8字节。所以需要遍历的指针个数为135168/8=16896。
4） 将结果输出到日志文件gdb.txt中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(gdb) set height 0
(gdb) set logging on
Copying output to gdb.txt.
(gdb) x/16896a 0x0000000000602000
gdb.txt的内容：
0x602000:       0x0     0x21
0x602010:       0x400b30 &amp;lt;_ZTV3ABC+16&amp;gt;  0x0
0x602020:       0x0     0x21
0x602030:       0x400b30 &amp;lt;_ZTV3ABC+16&amp;gt;  0x0
….
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5） 过滤gdb.txt：
awk &amp;lsquo;{print $2&amp;rdquo;/n&amp;rdquo;$3}&amp;rsquo; gdb.txt|c++filt|grep vtable&amp;gt;gdb_vtable.txt
gdb_vtable.txt的内容为：
&lt;vtable for ABC+16&gt;
&lt;vtable for ABC+16&gt;
&lt;vtable for ABC+16&gt;
&lt;vtable for ABC+16&gt;
….
6） 将gdb_vtable.txt的内容导入到SQLServer中（如果记录不多，可以用Excel代替）。表名为gdb_vtable，第一列Col001为符号。对其分组求和：
select Col001, count(1) quantity from gdb_vtable
group by Col001
order by quantity desc
结果为：
Col001                                                                                    quantity
&lt;vtable for ABC+16&gt;                                                              1000
&lt;vtable for std::bad_alloc@@GLIBCXX_3.4+16&gt;                1
可知core里有1000个ABC，遍历使用ABC的代码，可知存在泄漏。&lt;/p&gt;

&lt;p&gt;linux下调试内存泄露的利器Valgrind&lt;/p&gt;

&lt;p&gt;Valgrind的主要作者Julian Seward刚获得了今年的Google-O&amp;rsquo;Reilly开源大奖之一──Best Tool Maker。让我们一起来看一下他的作品。Valgrind是运行在Linux上一套基于仿真技术的程序调试和分析工具，它包含一个内核──一个软件合成的CPU，和一系列的小工具，每个工具都可以完成一项任务──调试，分析，或测试等。Valgrind可以检测内存泄漏和内存违例，还可以分析cache的使用等，灵活轻巧而又强大，能直穿程序错误的心脏，真可谓是程序员的瑞士军刀。&lt;/p&gt;

&lt;p&gt;更详细的文档可以参考：Valgrind Documentation&lt;/p&gt;

&lt;p&gt;一. Valgrind概观&lt;/p&gt;

&lt;p&gt;Valgrind的最新版是3.2.0，它一般包含下列工具：
1.Memcheck&lt;/p&gt;

&lt;p&gt;最常用的工具，用来检测程序中出现的内存问题，所有对内存的读写都会被检测到， 一切对malloc()/free()/new/delete的调用都会被捕获。所以，它能检测以下问题：&lt;/p&gt;

&lt;p&gt;1.对未初始化内存的使用；&lt;/p&gt;

&lt;p&gt;2.读/写释放后的内存块；&lt;/p&gt;

&lt;p&gt;3.读/写超出malloc分配的内存块；&lt;/p&gt;

&lt;p&gt;4.读/写不适当的栈中内存块；&lt;/p&gt;

&lt;p&gt;5.内存泄漏，指向一块内存的指针永远丢失；&lt;/p&gt;

&lt;p&gt;6.不正确的malloc/free或new/delete匹配；&lt;/p&gt;

&lt;p&gt;7,memcpy()相关函数中的dst和src指针重叠。&lt;/p&gt;

&lt;p&gt;这些问题往往是C/C++程序员最头疼的问题，Memcheck在这里帮上了大忙。
2.Callgrind&lt;/p&gt;

&lt;p&gt;和gprof类似的分析工具，但它对程序的运行观察更是入微，能给我们提供更多的信息。和gprof不同，它不需要在编译源代码时附加特殊选项，但加上调试选项是推荐的。Callgrind收集程序运行时的一些数据，建立函数调用关系图，还可以有选择地进行cache模拟。在运行结束时，它会把分析数据写入一个文件。callgrind_annotate可以把这个文件的内容转化成可读的形式。
3.Cachegrind&lt;/p&gt;

&lt;p&gt;Cache分析器，它模拟CPU中的一级缓存I1，Dl和二级缓存，能够精确地指出程序中cache的丢失和命中。如果需要，它还能够为我们提供cache丢失次数，内存引用次数，以及每行代码，每个函数，每个模块，整个程序产生的指令数。这对优化程序有很大的帮助。
4.Helgrind&lt;/p&gt;

&lt;p&gt;它主要用来检查多线程程序中出现的竞争问题。Helgrind寻找内存中被多个线程访问，而又没有一贯加锁的区域，这些区域往往是线程之间失去同步的地方，而且会导致难以发掘的错误。Helgrind实现了名为“Eraser”的竞争检测算法，并做了进一步改进，减少了报告错误的次数。不过，Helgrind仍然处于实验阶段。
5. Massif&lt;/p&gt;

&lt;p&gt;堆栈分析器，它能测量程序在堆栈中使用了多少内存，告诉我们堆块，堆管理块和栈的大小。Massif能帮助我们减少内存的使用，在带有虚拟内存的现代系统中，它还能够加速我们程序的运行，减少程序停留在交换区中的几率。&lt;/p&gt;

&lt;p&gt;此外，lackey和nulgrind也会提供。Lackey是小型工具，很少用到；Nulgrind只是为开发者展示如何创建一个工具。我们就不做介绍了。
二. 使用Valgrind&lt;/p&gt;

&lt;p&gt;Valgrind的使用非常简单，valgrind命令的格式如下：&lt;/p&gt;

&lt;p&gt;valgrind [valgrind-options] your-prog [your-prog options]&lt;/p&gt;

&lt;p&gt;一些常用的选项如下：&lt;/p&gt;

&lt;p&gt;选项&lt;/p&gt;

&lt;p&gt;作用&lt;/p&gt;

&lt;p&gt;-h &amp;ndash;help&lt;/p&gt;

&lt;p&gt;显示帮助信息。&lt;/p&gt;

&lt;p&gt;&amp;ndash;version&lt;/p&gt;

&lt;p&gt;显示valgrind内核的版本，每个工具都有各自的版本。&lt;/p&gt;

&lt;p&gt;-q &amp;ndash;quiet&lt;/p&gt;

&lt;p&gt;安静地运行，只打印错误信息。&lt;/p&gt;

&lt;p&gt;-v &amp;ndash;verbose&lt;/p&gt;

&lt;p&gt;打印更详细的信息。&lt;/p&gt;

&lt;p&gt;&amp;ndash;tool=&lt;toolname&gt; [default: memcheck]&lt;/p&gt;

&lt;p&gt;最常用的选项。运行valgrind中名为toolname的工具。如果省略工具名，默认运行memcheck。&lt;/p&gt;

&lt;p&gt;&amp;ndash;db-attach=&lt;yes|no&gt; [default: no]&lt;/p&gt;

&lt;p&gt;绑定到调试器上，便于调试错误。&lt;/p&gt;

&lt;p&gt;我们通过例子看一下它的具体使用。我们构造一个存在内存泄漏的C程序，如下：&lt;/p&gt;

&lt;p&gt;[cpp] view plaincopyprint?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;  
#include &amp;lt;stdio.h&amp;gt;  
void f(void)  
{  
    int* x = malloc(10 * sizeof(int));  
    x[10] = 0; // problem 1: heap block overrun  
    } // problem 2: memory leak -- x not freed  
    int main(void)  
    {  
    int i;  
    f();  
    printf(&amp;quot;i=%d\n&amp;quot;,i); //problem 3: use uninitialised value.  
    return 0;  
}  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存为memleak.c并编译，然后用valgrind检测。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gcc -Wall -o memleak memleak.c
$ valgrind --tool=memcheck ./memleak
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们得到如下错误信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==3649== Invalid write of size 4
==3649== at 0x80483CF: f (in /home/wangcong/memleak)
==3649== by 0x80483EC: main (in /home/wangcong/memleak)
==3649== Address 0x4024050 is 0 bytes after a block of size 40 alloc&#39;d
==3649== at 0x40051F9: malloc (vg_replace_malloc.c:149)
==3649== by 0x80483C5: f (in /home/wangcong/memleak)
==3649== by 0x80483EC: main (in /home/wangcong/memleak)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前面的3649是程序运行时的进程号。第一行是告诉我们错误类型，这里是非法写入。下面的是告诉我们错误发生的位置，在main()调用的f()函数中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==3649== Use of uninitialised value of size 4
==3649== at 0xC3A264: _itoa_word (in /lib/libc-2.4.so)
==3649== by 0xC3E25C: vfprintf (in /lib/libc-2.4.so)
==3649== by 0xC442B6: printf (in /lib/libc-2.4.so)
==3649== by 0x80483FF: main (in /home/wangcong/memleak)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个错误是使用未初始化的值，在main()调用的printf()函数中。这里的函数调用关系是通过堆栈跟踪的，所以有时会非常多，尤其是当你使用C++的STL时。其它一些错误都是由于把未初始化的值传递给libc函数而被检测到。在程序运行结束后，valgrind还给出了一个小的总结：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==3649== ERROR SUMMARY: 20 errors from 6 contexts (suppressed: 12 from 1)
==3649== malloc/free: in use at exit: 40 bytes in 1 blocks.
==3649== malloc/free: 1 allocs, 0 frees, 40 bytes allocated.
==3649== For counts of detected errors, rerun with: -v
==3649== searching for pointers to 1 not-freed blocks.
==3649== checked 47,256 bytes.
==3649==
==3649== LEAK SUMMARY:
==3649== definitely lost: 40 bytes in 1 blocks.
==3649== possibly lost: 0 bytes in 0 blocks.
==3649== still reachable: 0 bytes in 0 blocks.
==3649== suppressed: 0 bytes in 0 blocks.
==3649== Use --leak-check=full to see details of leaked memory.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以很清楚地看出，分配和释放了多少内存，有多少内存泄漏。这对我们查找内存泄漏十分方便。然后我们重新编译程序并绑定调试器：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gcc -Wall -ggdb -o memleak memleak.c
$ valgrind --db-attach=yes --tool=memcheck ./memleak
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一出现错误，valgrind会自动启动调试器（一般是gdb）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==3893== ---- Attach to debugger ? --- [Return/N/n/Y/y/C/c] ---- y
starting debugger
==3893== starting debugger with cmd: /usr/bin/gdb -nw /proc/3895/fd/1014 3895
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;退出gdb后我们又能回到valgrind继续执行程序。&lt;/p&gt;

&lt;p&gt;还是用上面的程序，我们使用callgrind来分析一下它的效率：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ valgrind --tool=callgrind ./memleak
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Callgrind会输出很多，而且最后在当前目录下生成一个文件： callgrind.out.pid。用callgrind_annotate来查看它：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ callgrind_annotate callgrind.out.3949
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详细的信息就列出来了。而且，当callgrind运行你的程序时，你还可以使用callgrind_control来观察程序的执行，而且不会干扰它的运行。&lt;/p&gt;

&lt;p&gt;再来看一下cachegrind的表现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ valgrind --tool=cachegrind ./memleak
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到如下信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==4073== I refs: 147,500
==4073== I1 misses: 1,189
==4073== L2i misses: 679
==4073== I1 miss rate: 0.80%
==4073== L2i miss rate: 0.46%
==4073==
==4073== D refs: 61,920 (46,126 rd + 15,794 wr)
==4073== D1 misses: 1,759 ( 1,545 rd + 214 wr)
==4073== L2d misses: 1,241 ( 1,062 rd + 179 wr)
==4073== D1 miss rate: 2.8% ( 3.3% + 1.3% )
==4073== L2d miss rate: 2.0% ( 2.3% + 1.1% )
==4073==
==4073== L2 refs: 2,948 ( 2,734 rd + 214 wr)
==4073== L2 misses: 1,920 ( 1,741 rd + 179 wr)
==4073== L2 miss rate: 0.9% ( 0.8% + 1.1% )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的是指令缓存，I1和L2i缓存，的访问信息，包括总的访问次数，丢失次数，丢失率。&lt;/p&gt;

&lt;p&gt;中间的是数据缓存，D1和L2d缓存，的访问的相关信息，下面的L2缓存单独的信息。Cachegrind也生成一个文件，名为cachegrind.out.pid，可以通过cg_annotate来读取。输出是一个更详细的列表。Massif的使用和cachegrind类似，不过它也会生成一个名为massif.pid.ps的PostScript文件，里面只有一幅描述堆栈使用状况的彩图。&lt;/p&gt;

&lt;p&gt;以上只是简单的演示了valgrind的使用，更多的信息可以在它附带的文档中得到，也可以访问valgrind的主页：&lt;a href=&#34;http://www.valgrind.org。学会正确合理地使用valgrind对于调试程序会有很大的帮助。&#34;&gt;http://www.valgrind.org。学会正确合理地使用valgrind对于调试程序会有很大的帮助。&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
